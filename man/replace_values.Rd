% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/replace_values.R
\name{replace_values}
\alias{replace_values}
\title{Replace values in a named vector while preserving order and other elements.}
\usage{
replace_values(value, replacement)
}
\arguments{
\item{value}{A named atomic vector (e.g., numeric, character, logical).
This is the vector whose values will be modified. Must have names.}

\item{replacement}{A named atomic vector of the same type as \code{value} (or coercible).
The names in this vector specify which elements in \code{value} to replacement,
and its values are the new values to be assigned. Must have names.}
}
\value{
A named vector with the updated values. The order and names of
elements not specified in \code{replacement} remain unchanged from \code{value}.
}
\description{
This function takes a source named vector (\code{value}) and a named vector of
replacements. It replaces the values in \code{value} where the names
match those in \code{replacement}, while keeping all other values and their
original order intact.
}
\examples{
# Example usage:
value <- c(a=2, b=3, d=5, foo=66)
replace <- c(foo=0, b=77)

new_value <- replace_values(value, replace)
print(new_value)
# Expected output: a=2, b=77, d=5, foo=0

# Example with some names in 'replacement' not present in 'value'
value2 <- c(x=10, y=20)
replacement2 <- c(y=50, z=100) # 'z' is not in src2
new_value2 <- replace_values(value2, replacement2)
print(new_value2)
# Expected output: x=10, y=50, with a warning about 'z'

# Example with missing names in value or replacement (will throw an error)
# tryCatch(replace_values(c(1,2), c(a=3)), error = function(e) message(e$message))
# tryCatch(replace_values(c(a=1, b=2), c(3,4)), error = function(e) message(e$message))
}
